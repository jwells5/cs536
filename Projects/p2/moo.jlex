import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
LETTER=       [a-zA-Z]

WHITE=        [\040\t]
ESCAPE=       (\\[nt'?\\\"])

COMMENT=      (("#"|"//").*)
ID=           (({LETTER}|"_")({LETTER}|"_"|{DIGIT})*)
STRING=       (\"({ESCAPE}|[^\"\n\\])*\")
UNTERM_STR=   (\"({ESCAPE}|[^\"\n\\])*)
UNESC_STR=    (\"(({ESCAPE}|[^\"\n\\])*(\\[^nt'?\"\n])({ESCAPE}|[^\"\n\\])*)*\")
UNESC_STR2=   (\"(({ESCAPE}|[^\"\n\\])*(\\[^nt'?\"\n])*)*\\[\n])


%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
    return new Symbol(sym.EOF);
%eofval}

%{
    /**
     * Creates a symbol/token at yyline+1:CharNum.num with the given symbol id.
     * Adds the length of yytext() to CharNum.num
     * 
     * @param symId The symbol id.
     */
    private Symbol createSymbol(int symId) {
        return createSymbol(symId, new TokenVal(yyline+1, CharNum.num));
    }

    /**
     * Create a symbol at yyline+1:CharNum.num with the given symbol id and token.
     * Adds the length of yytext() to CharNum.num
     *
     * @param symId The symbol id.
     * @param token The sym token.
     */
    private Symbol createSymbol(int symId, TokenVal token) {
        Symbol symbol = new Symbol(symId, token);
        CharNum.num += yytext().length();
        return symbol;
    }
%}

%line

%%

{COMMENT}  { }

"++"       { return createSymbol(sym.PLUSPLUS); }
"/"        { return createSymbol(sym.DIVIDE); }
"=="       { return createSymbol(sym.EQUALS); }
">"        { return createSymbol(sym.GREATER); }
"("        { return createSymbol(sym.LPAREN); }
"int"      { return createSymbol(sym.INT); }
"<"        { return createSymbol(sym.LESS); }
"-"        { return createSymbol(sym.MINUS); }
"<<"       { return createSymbol(sym.WRITE); }
")"        { return createSymbol(sym.RPAREN); }
"!"        { return createSymbol(sym.NOT); }
";"        { return createSymbol(sym.SEMICOLON); }
"&&"       { return createSymbol(sym.AND); }
"||"       { return createSymbol(sym.OR); }
"bool"     { return createSymbol(sym.BOOL); }
","        { return createSymbol(sym.COMMA); }
"+"        { return createSymbol(sym.PLUS); }
"="        { return createSymbol(sym.ASSIGN); }
"<="       { return createSymbol(sym.LESSEQ); }
"if"       { return createSymbol(sym.IF); }
"."        { return createSymbol(sym.DOT); }
"--"       { return createSymbol(sym.MINUSMINUS); }
"return"   { return createSymbol(sym.RETURN); }
"true"     { return createSymbol(sym.TRUE); }
"{"        { return createSymbol(sym.LCURLY); }
"cin"      { return createSymbol(sym.CIN); }
"void"     { return createSymbol(sym.VOID); }
"}"        { return createSymbol(sym.RCURLY); }
"*"        { return createSymbol(sym.TIMES); }
"else"     { return createSymbol(sym.ELSE); }
"cout"     { return createSymbol(sym.COUT); }
">>"       { return createSymbol(sym.READ); }
"!="       { return createSymbol(sym.NOTEQUALS); }
"while"    { return createSymbol(sym.WHILE); }
">="       { return createSymbol(sym.GREATEREQ); }
"false"    { return createSymbol(sym.FALSE); }
// woops forgot this one
// "struct"   { return createSymbol(sym.STRUCT); }

{ID}+     {
            TokenVal token = new IdTokenVal(yyline+1, CharNum.num, yytext());
            return createSymbol(sym.ID, token);
          }

{DIGIT}+  { 
            int val = -1;
            try {
                val = (new Integer(yytext())).intValue();
            } catch (NumberFormatException e) {
                ErrMsg.warn(yyline + 1, CharNum.num, "integer literal too large; using max value");
                val = Integer.MAX_VALUE;
            }
            TokenVal token = new IntLitTokenVal(yyline+1, CharNum.num, val);
            return createSymbol(sym.INTLITERAL, token);
          }

{STRING}  {
             TokenVal token = new StrLitTokenVal(yyline+1, CharNum.num, yytext());
             return createSymbol(sym.STRINGLITERAL, token);
           }

{UNTERM_STR} {
             ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal");
             CharNum.num = 1;
           }

{UNESC_STR} {
             ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal and bad escape character");
             // add length of the string
             CharNum.num += yytext().length();
           }

{UNESC_STR2} {
             ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal and bad escape character");
             // ends in new line, start at 1
             CharNum.num = 1;
           }

\n        { CharNum.num = 1; }

{WHITE}+  { CharNum.num += yytext().length(); }

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num++;
          }
